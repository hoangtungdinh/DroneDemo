import os
from bidict import bidict
from VirtualObject import VirtualObject


class VirtualObjectWarehouse:
    """
    The warehouse storing all virtual object
    """

    def __init__(self, directory, prefix):
        self._filename_object_dict = self._scan_object(directory, prefix)
        self._hashcode_filename_dict = bidict()

    def _scan_object(self, directory, prefix):
        """
        Scan all input files whose names starting with the given prefix, create virtual object from those files and
        store them in a dictionary where keys are file names and values are the created virtual objects. If two files
        contain the same object, only the first file (in the scanning order) is added to the warehouse.
        :param directory: the directory to be scanned
        :type directory: str
        :param prefix: the prefix
        :type prefix: str
        :return: a dictionary where keys are file names and values are the created virtual objects
        :rtype: dict
        """
        file_list = [f for f in os.walk(directory).next()[2] if f.startswith(prefix)]

        filename_object_dict = bidict()
        for file_name in file_list:
            virtual_object = VirtualObject(directory + "/" + file_name)
            if virtual_object not in filename_object_dict.values():
                filename_object_dict[file_name] = virtual_object

        return filename_object_dict

    def get_virtual_object_by_filename(self, file_name):
        """
        Given a file name, return the virtual object
        :param file_name: the file name
        :type file_name: str
        :return: the virtual object
        :rtype: VirtualObject
        """
        return self._filename_object_dict[file_name]

    def update_virtual_object_hashcode(self, file_name, hashcode):
        """
        Update the hashcode (created by server) of the virtual object stored in the given file name
        :param file_name: the file name
        :type file_name: str
        :param hashcode: the hashcode generated by server
        :type hashcode: hashcode
        """
        self._hashcode_filename_dict[hashcode] = file_name

    def get_virtual_object_by_hashcode(self, hashcode):
        """
        Get the virtual object using the hashcode generated by the server
        :param hashcode: the hashcode generated by the server
        :type hashcode: hashcode
        :return: the corresponding virtual object
        :rtype: VirtualObject
        """
        file_name = self._hashcode_filename_dict[hashcode]
        return self._filename_object_dict[file_name]

    def get_all_object_file_names(self):
        return self._filename_object_dict.keys()

    def get_file_name_by_hashcode(self, hashcode):
        if hashcode not in self._hashcode_filename_dict.keys():
            raise ValueError("The hashcode doesn't exist.")

        return self._hashcode_filename_dict[hashcode]

    def get_hashcode_by_file_name(self, file_name):
        if file_name not in self._hashcode_filename_dict.values():
            raise ValueError("The file name doesn't exist.")

        return self._hashcode_filename_dict.inv[file_name]

    def update_hashcode(self, file_name, hashcode):
        if file_name not in self._filename_object_dict.keys():
            raise ValueError("The file name doesn't exist.")

        self._hashcode_filename_dict[hashcode] = file_name
